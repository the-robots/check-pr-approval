name: Check Approval on New Commits

on:
  push:
    branches:
      - '**'

jobs:
  check-approval:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Get the pull request associated with the push (if any)
      - name: Find associated pull request
        id: find-pr
        run: |
          pr_url=$(gh pr list --head "${{ github.actor }}:${{ github.ref_name }}" --json url --jq '.[0].url')
          echo "PR_URL=$pr_url" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Get the latest commit timestamp
      - name: Get latest commit timestamp
        id: latest-commit
        run: |
          commit_sha=$(git rev-parse HEAD)
          commit_timestamp=$(gh api graphql -f query='
          {
            repository(owner:"${{ github.repository_owner }}", name:"${{ github.event.repository.name }}") {
              object(expression: "${commit_sha}") {
                ... on Commit {
                  committedDate
                }
              }
            }
          }' --jq '.data.repository.object.committedDate')
          echo "COMMIT_TIMESTAMP=$commit_timestamp" >> $GITHUB_ENV

      # Step 4: Get the approval timestamp
      - name: Get approval timestamp
        id: get-approval
        run: |
          approval_timestamp=$(gh api graphql -f query='
          {
            repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
              pullRequest(number: {{ pull_request_number }}) {
                reviews(last: 1, states: APPROVED) {
                  nodes {
                    createdAt
                  }
                }
              }
            }
          }' --jq '.data.repository.pullRequest.reviews.nodes[0].createdAt')
          echo "APPROVAL_TIMESTAMP=$approval_timestamp" >> $GITHUB_ENV

      # Step 5: Compare the timestamps
      - name: Compare timestamps
        id: compare-timestamps
        run: |
          if [[ "${{ env.COMMIT_TIMESTAMP }}" > "${{ env.APPROVAL_TIMESTAMP }}" ]]; then
            echo "New commit was pushed after approval. Dismissing approval."
            exit 1  # Fail the check if a new commit was pushed after approval
          else
            echo "No new commit after approval."
          fi
        env:
          COMMIT_TIMESTAMP: ${{ env.COMMIT_TIMESTAMP }}
          APPROVAL_TIMESTAMP: ${{ env.APPROVAL_TIMESTAMP }}

      # Step 6: (Optional) Notify if approval is invalid
      - name: Notify team about invalid approval
        if: failure()
        run: |
          echo "New commit detected after approval. Notify team!"
          # Add your notification logic here (e.g., send a Slack message or post a comment on the PR)

